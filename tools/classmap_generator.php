<?php
/**
 * Created by PhpStorm.
 * User: Exlord
 * Date: 12/8/13
 * Time: 10:37 AM
 */
set_time_limit(0);
define('ROOT', dirname(__DIR__));
define("MODULE_DIR", ROOT . '/module');
include_once MODULE_DIR . '/System/src/System/IO/Directory.php';
include_once ROOT . '/vendor/ZF2/library/Zend/File/ClassFileLocator.php';
include_once ROOT . '/vendor/ZF2/library/Zend/File/PhpClassFile.php';

$modules = \System\IO\Directory::getDirs(MODULE_DIR);
foreach ($modules as $module) {
    $classMapFile = MODULE_DIR . '/' . $module . '/autoload_classmap.php';

    $srcFolder = MODULE_DIR . '/' . $module . '/src';
    if (is_dir($srcFolder))
        $l = new \Zend\File\ClassFileLocator($srcFolder);

    $map = new stdClass;
    /* @var $file SplFileInfo */
    foreach ($l as $file) {
        $filename = str_replace(str_replace('\\', '/', $srcFolder) . '/', '', str_replace(DIRECTORY_SEPARATOR, '/', $file->getPath()) . '/' . $file->getFilename());

        foreach ($file->getClasses() as $class) {
            $map->{$class} = $filename;
        }
    }

    $map = (array)$map;

    // Create a file with the class/file map.
    // Stupid syntax highlighters make separating < from PHP declaration necessary
    $content = '<' . "?php\n"
        . "// Generated by Exlord's(adeli.farhad@gmail.com) tools/classmap_generator.php\n"
        . 'return ' . var_export($map, true) . ';';

    // Prefix with __DIR__; modify the generated content
    $content = preg_replace("#(=> ')#", "=> __DIR__ . '/src/", $content);

    // Fix \' strings from injected DIRECTORY_SEPARATOR usage in iterator_apply op
    $content = str_replace("\\'", "'", $content);

    // Remove unnecessary double-backslashes
    $content = str_replace('\\\\', '\\', $content);

    // Exchange "array (" width "array("
    $content = str_replace('array (', 'array(', $content);

    // Align "=>" operators to match coding standard
    preg_match_all('(\n\s+([^=]+)=>)', $content, $matches, PREG_SET_ORDER);
    $maxWidth = 0;

    foreach ($matches as $match) {
        $maxWidth = max($maxWidth, strlen($match[1]));
    }

    $content = preg_replace_callback(
        '(\n\s+([^=]+)=>)',
        function ($match) use ($maxWidth) {
            return "\n  " . $match[1] . str_repeat(" ", $maxWidth - strlen($match[1])) . '=>';
        },
        $content
    );

    // Make the file end by EOL
    $content = rtrim($content, "\n") . "\n";

    // Write the contents to disk
    file_put_contents($classMapFile, $content);
}